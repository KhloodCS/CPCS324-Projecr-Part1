/* CPCS324 Project Part 1

 Group members: 
    1- Razan Alamri
    2- Khloud Alsofyani
    3- Leen Ba Galaql
    4- Shatha Binmahfouz
 */
package GraphFramework;

import java.util.*;

/*KruskalAlg: is a subclass of MSTAlgorithm. It implements the polymorphic operation
displayResultingMST(). Make sure it calls the displayInfo() method of the Vertex and Edge
classes.
 */
public class KruskalAlg extends MSTAlgorithm {

   public KruskalAlg(Graph graph) {
      super(graph);
   }

   @Override
   public void displayResultingMST(boolean isFile) {
      // Initialize the minimum spanning tree as a list of edges
      List<Edge> MSTResultList = new ArrayList<>();

      // Get all the edges in the graph and add them to the allEdges list
      List<Edge> allEdges = new ArrayList<>();
      for (Vertex vertex : graph.getVertices()) {
         for (Edge edge : vertex.getAdjList()) {
            allEdges.add(edge);
         }
      }

      // Sort all edges in the graph in non-decreasing order of weight
      Collections.sort(allEdges, Comparator.comparingInt(Edge::getWeight));

      // Create a disjoint set data structure to keep track of the connected
      // components of the graph
      DisjointSet disjointSet = new DisjointSet(graph.getVerticesNo());

      // Loop over all edges in the sorted list
      for (Edge edge : allEdges) {
         Vertex sourceVertex = edge.getSource();
         Vertex targetVertex = edge.getTarget();

         // Check if the source and target vertices belong to the same connected
         // component
         if (disjointSet.find(sourceVertex.getID()) != disjointSet.find(targetVertex.getID())) {
            // Add the edge to the minimum spanning tree and merge the connected components
            // of the source and target vertices
            MSTResultList.add(edge);
            disjointSet.union(sourceVertex.getID(), targetVertex.getID());
         }
      }

      /*
       * Display the minimum spanning tree and the information of
       * all vertices and edges in the graph and print pnly graph that read from file
       */
      if (isFile) {
         int cost = 0;
         System.out
               .println("The phone network (minimum spanning tree) generated by Kruskal algorithm is as follows:\n");
         for (Edge edge : MSTResultList) {
            cost += edge.weight;
            edge.displyInfo();
         }
         System.out.println("\nThe cost of designed phone network: " + cost);
      }
   }
}

class DisjointSet {
   private int[] parent;
   private int[] rank;

   public DisjointSet(int size) {
      parent = new int[size];
      rank = new int[size];

      for (int i = 0; i < size; i++) {
         parent[i] = i;
         rank[i] = 0;
      }
   }

   public void union(int x, int y) {
      int rootX = find(x);
      int rootY = find(y);

      if (rank[rootX] < rank[rootY]) {
         parent[rootX] = rootY;
      } else if (rank[rootX] > rank[rootY]) {
         parent[rootY] = rootX;
      } else {
         parent[rootY] = rootX;
         rank[rootX]++;
      }
   }

   public int find(int x) {
      if (parent[x] != x) {
         parent[x] = find(parent[x]);
      }
      return parent[x];
   }
}